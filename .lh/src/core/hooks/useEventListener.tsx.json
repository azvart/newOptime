{
    "sourceFile": "src/core/hooks/useEventListener.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1644411500739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1644411539776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,8 @@\n     return () => {\n       element.removeEventListener(eventName, eventListener);\n     }\n   },[eventName, element])\n-}\n\\ No newline at end of file\n+}\n+\n+\n+export default useEventListener;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1644411732630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useRef, useEffect, useCallback } from 'react';\n \n \n \n-function useEventListener(eventName:string, handler:void, element = window){\n+function useEventListener(eventName:string, handler:any, element = window){\n \n   const saveHanlder:any = useRef();\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1644411826739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useRef, useEffect, useCallback } from 'react';\n \n \n \n-function useEventListener(eventName:string, handler:any, element = window){\n+function useEventListener(eventName:string, handler:any, element){\n \n   const saveHanlder:any = useRef();\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1644411950311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useRef, useEffect, useCallback } from 'react';\n \n \n \n-function useEventListener(eventName:string, handler:any, element){\n+function useEventListener(eventName:string, handler:any){\n \n   const saveHanlder:any = useRef();\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1644411973015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,19 +10,19 @@\n     saveHanlder.current = handler;\n   },[handler])\n \n   useEffect(() => {\n-    const isSupported = element && element.addEventListener;\n+    const isSupported = document && document.addEventListener;\n     if(!isSupported) return;\n \n     const eventListener = (event:any) => saveHanlder.current(event);\n \n-    element.addEventListener(eventName, eventListener);\n+    document.addEventListener(eventName, eventListener);\n \n     return () => {\n-      element.removeEventListener(eventName, eventListener);\n+      document.removeEventListener(eventName, eventListener);\n     }\n-  },[eventName, element])\n+  },[eventName, document])\n }\n \n \n export default useEventListener;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1644412000169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     return () => {\n       document.removeEventListener(eventName, eventListener);\n     }\n-  },[eventName, document])\n+  },[eventName])\n }\n \n \n export default useEventListener;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1644411500739,
            "name": "Commit-0",
            "content": "import { useRef, useEffect, useCallback } from 'react';\n\n\n\nfunction useEventListener(eventName:string, handler:void, element = window){\n\n  const saveHanlder:any = useRef();\n\n  useEffect(() => {\n    saveHanlder.current = handler;\n  },[handler])\n\n  useEffect(() => {\n    const isSupported = element && element.addEventListener;\n    if(!isSupported) return;\n\n    const eventListener = (event:any) => saveHanlder.current(event);\n\n    element.addEventListener(eventName, eventListener);\n\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    }\n  },[eventName, element])\n}"
        }
    ]
}