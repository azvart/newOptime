{
    "sourceFile": "src/core/components/InputField/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1644411610777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1644411696305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,11 @@\n }) => {\r\n   useEffect(() => {\r\n     onChange(value);\r\n   },[value]);\r\n-  const onSubmit = useCallback(() => {\r\n+  const onSubmit = useCallback((event:any) => {\r\n+    const { key } = event;\r\n+    if(key === 'Enter'){\r\n     try{\r\n     console.log(value)\r\n     console.log(autocomplete);\r\n     const data = autocomplete.filter(({label}:any) => label === value);\r\n@@ -67,25 +69,26 @@\n     setError(true)\r\n     setBool(false);\r\n     return;\r\n   }\r\n+}\r\n   },[value, autocomplete]);\r\n \r\n-  useEffect(() => {\r\n-    const handleClick = (event:any) => {\r\n-      const { key } = event;\r\n-      if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n+  // useEffect(() => {\r\n+  //   const handleClick = (event:any) => {\r\n+  //     const { key } = event;\r\n+  //     if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n         \r\n-          onSubmit()\r\n+  //         onSubmit()\r\n         \r\n        \r\n-      }\r\n-    }\r\n-      document.addEventListener('keydown', handleClick);\r\n-    return () => {\r\n-      document.removeEventListener('keydown', handleClick);\r\n-    }\r\n-  },[ onSubmit, autocomplete, value ]);\r\n+  //     }\r\n+  //   }\r\n+  //     document.addEventListener('keydown', handleClick);\r\n+  //   return () => {\r\n+  //     document.removeEventListener('keydown', handleClick);\r\n+  //   }\r\n+  // },[ onSubmit, autocomplete, value ]);\r\n   return (\r\n     <div style={{ display: \"flex\", flexGrow: 1, alignItems: \"flex-end\" }}>\r\n       <div\r\n         className={`input-field ${classes} ${\r\n"
                },
                {
                    "date": 1644411735314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     return;\r\n   }\r\n }\r\n   },[value, autocomplete]);\r\n-\r\n+  useEventListener('keydown', onSubmit);\r\n   // useEffect(() => {\r\n   //   const handleClick = (event:any) => {\r\n   //     const { key } = event;\r\n   //     if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n"
                },
                {
                    "date": 1644411777073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n         </div>\r\n         {haveSubmit && (\r\n           <button\r\n             className=\"input-field__submit-button\"\r\n-            onMouseDown={() => onSubmit()}\r\n+            onMouseDown={(event) => onSubmit(event)}\r\n             onClick={() => submitSearch()}\r\n           >\r\n             {buttonText}\r\n           </button>\r\n"
                },
                {
                    "date": 1644411881979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     return;\r\n   }\r\n }\r\n   },[value, autocomplete]);\r\n-  useEventListener('keydown', onSubmit);\r\n+  useEventListener('keydown', onSubmit, document);\r\n   // useEffect(() => {\r\n   //   const handleClick = (event:any) => {\r\n   //     const { key } = event;\r\n   //     if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n"
                },
                {
                    "date": 1644411946192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     return;\r\n   }\r\n }\r\n   },[value, autocomplete]);\r\n-  useEventListener('keydown', onSubmit, document);\r\n+  useEventListener('keydown', onSubmit);\r\n   // useEffect(() => {\r\n   //   const handleClick = (event:any) => {\r\n   //     const { key } = event;\r\n   //     if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n"
                },
                {
                    "date": 1644413848757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,24 +71,24 @@\n     return;\r\n   }\r\n }\r\n   },[value, autocomplete]);\r\n-  useEventListener('keydown', onSubmit);\r\n-  // useEffect(() => {\r\n-  //   const handleClick = (event:any) => {\r\n-  //     const { key } = event;\r\n-  //     if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n+\r\n+  useEffect(() => {\r\n+    const handleClick = (event:any) => {\r\n+      const { key } = event;\r\n+      if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n         \r\n-  //         onSubmit()\r\n+          onSubmit()\r\n         \r\n        \r\n-  //     }\r\n-  //   }\r\n-  //     document.addEventListener('keydown', handleClick);\r\n-  //   return () => {\r\n-  //     document.removeEventListener('keydown', handleClick);\r\n-  //   }\r\n-  // },[ onSubmit, autocomplete, value ]);\r\n+      }\r\n+    }\r\n+      document.addEventListener('keydown', handleClick);\r\n+    return () => {\r\n+      document.removeEventListener('keydown', handleClick);\r\n+    }\r\n+  },[ onSubmit, autocomplete, value ]);\r\n   return (\r\n     <div style={{ display: \"flex\", flexGrow: 1, alignItems: \"flex-end\" }}>\r\n       <div\r\n         className={`input-field ${classes} ${\r\n@@ -119,9 +119,9 @@\n         </div>\r\n         {haveSubmit && (\r\n           <button\r\n             className=\"input-field__submit-button\"\r\n-            onMouseDown={(event) => onSubmit(event)}\r\n+            onMouseDown={() => onSubmit()}\r\n             onClick={() => submitSearch()}\r\n           >\r\n             {buttonText}\r\n           </button>\r\n"
                },
                {
                    "date": 1644413855797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n }) => {\r\n   useEffect(() => {\r\n     onChange(value);\r\n   },[value]);\r\n-  const onSubmit = useCallback((event:any) => {\r\n+  const onSubmit = useCallback(() => {\r\n     const { key } = event;\r\n     if(key === 'Enter'){\r\n     try{\r\n     console.log(value)\r\n"
                },
                {
                    "date": 1644413868380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,8 @@\n   useEffect(() => {\r\n     onChange(value);\r\n   },[value]);\r\n   const onSubmit = useCallback(() => {\r\n-    const { key } = event;\r\n-    if(key === 'Enter'){\r\n     try{\r\n     console.log(value)\r\n     console.log(autocomplete);\r\n     const data = autocomplete.filter(({label}:any) => label === value);\r\n@@ -68,9 +66,9 @@\n   }catch(e){\r\n     setError(true)\r\n     setBool(false);\r\n     return;\r\n-  }\r\n+  \r\n }\r\n   },[value, autocomplete]);\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1644413875994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { ChangeEvent, FC, useEffect, useState, useCallback, useRef } from \"react\";\r\n import AutocompleteInput from \"../AutocompleteInput\";\r\n-import useEventListener from '../../hooks/useEventListener';\r\n import \"../../assets/components/inputField.scss\";\r\n \r\n type Props = {\r\n   classes?: string;\r\n"
                }
            ],
            "date": 1644411610777,
            "name": "Commit-0",
            "content": "import React, { ChangeEvent, FC, useEffect, useState, useCallback, useRef } from \"react\";\r\nimport AutocompleteInput from \"../AutocompleteInput\";\r\nimport useEventListener from '../../hooks/useEventListener';\r\nimport \"../../assets/components/inputField.scss\";\r\n\r\ntype Props = {\r\n  classes?: string;\r\n  autocompleteClasses?: string;\r\n  placeholder?: string;\r\n  value: string;\r\n  iconUrl?: string;\r\n  onChange: (value: string) => void;\r\n  haveSubmit?: boolean;\r\n  buttonText?: string;\r\n  // autocomplete?: Array<{\r\n  //   label: string;\r\n  // }>;\r\n  autocomplete: any;\r\n  errorHandle?: boolean;\r\n  error?: string;\r\n  selected?: boolean;\r\n  grouping?:boolean;\r\n  filtered?:any;\r\n  setFiltered?:any,\r\n  ref?:any\r\n  setError?:any,\r\n  setBool?:any,\r\n  open?:boolean\r\n  submitSearch?:any\r\n};\r\n\r\nconst InputField: FC<Props> = ({\r\n  classes,\r\n  autocompleteClasses,\r\n  placeholder = \"\",\r\n  value,\r\n  iconUrl,\r\n  onChange,\r\n  haveSubmit = false,\r\n  buttonText,\r\n  autocomplete = [],\r\n  errorHandle,\r\n  error,\r\n  selected,\r\n  grouping,\r\n  filtered,\r\n  setFiltered,\r\n  setError,\r\n  setBool,\r\n  submitSearch\r\n}) => {\r\n  useEffect(() => {\r\n    onChange(value);\r\n  },[value]);\r\n  const onSubmit = useCallback(() => {\r\n    try{\r\n    console.log(value)\r\n    console.log(autocomplete);\r\n    const data = autocomplete.filter(({label}:any) => label === value);\r\n    const firstElem = autocomplete[0].label;\r\n    if(data.length === 0){\r\n      onChange(firstElem);\r\n    }\r\n    setBool(true);\r\n    return;\r\n  }catch(e){\r\n    setError(true)\r\n    setBool(false);\r\n    return;\r\n  }\r\n  },[value, autocomplete]);\r\n\r\n  useEffect(() => {\r\n    const handleClick = (event:any) => {\r\n      const { key } = event;\r\n      if(key === 'Enter' && value.length > 0 && autocomplete.length > 0){\r\n        \r\n          onSubmit()\r\n        \r\n       \r\n      }\r\n    }\r\n      document.addEventListener('keydown', handleClick);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleClick);\r\n    }\r\n  },[ onSubmit, autocomplete, value ]);\r\n  return (\r\n    <div style={{ display: \"flex\", flexGrow: 1, alignItems: \"flex-end\" }}>\r\n      <div\r\n        className={`input-field ${classes} ${\r\n          errorHandle === true ? \"error\" : classes\r\n        }`}\r\n      >\r\n        <div className=\"input-field__row\">\r\n          <div className=\"input-field__icon-wrapper\">\r\n            <img src={iconUrl} className=\"input-field__icon\" alt=\"\" />\r\n          </div>\r\n\r\n            <AutocompleteInput\r\n              filtered={filtered}\r\n              setFiltered={setFiltered}\r\n              grouping={grouping}\r\n              placeholder={placeholder}\r\n              classes={\r\n                autocompleteClasses === undefined\r\n                  ? \"input-field__input\"\r\n                  : autocompleteClasses\r\n              }\r\n              value={value}\r\n              setValue={onChange}\r\n              autocomplete={autocomplete}\r\n              selected={selected}\r\n            />\r\n\r\n        </div>\r\n        {haveSubmit && (\r\n          <button\r\n            className=\"input-field__submit-button\"\r\n            onMouseDown={() => onSubmit()}\r\n            onClick={() => submitSearch()}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n"
        }
    ]
}