{
    "sourceFile": "src/server/controllers/medication.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1643623298801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643623435111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n         //   return await array.filter((e:any,i:any) => array.findIndex((a:any) => a.label[propertyName] === e.label[propertyName]) === i);\n         // }\n         // const data = await unique(medication, \"label\");\n         const medication:any = await ModelMedication.searchUniqueMed();\n+        console.log(medication);\n         return res.status(200).json(medication);\n     }catch(err){\n       console.error(err);\n     }\n"
                },
                {
                    "date": 1643623912498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n         //   return await array.filter((e:any,i:any) => array.findIndex((a:any) => a.label[propertyName] === e.label[propertyName]) === i);\n         // }\n         // const data = await unique(medication, \"label\");\n         const medication:any = await ModelMedication.searchUniqueMed();\n-        console.log(medication);\n+        console.log(medication.length);\n         return res.status(200).json(medication);\n     }catch(err){\n       console.error(err);\n     }\n"
                },
                {
                    "date": 1643623930781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,8 @@\n         //   return await array.filter((e:any,i:any) => array.findIndex((a:any) => a.label[propertyName] === e.label[propertyName]) === i);\n         // }\n         // const data = await unique(medication, \"label\");\n         const medication:any = await ModelMedication.searchUniqueMed();\n-        console.log(medication.length);\n         return res.status(200).json(medication);\n     }catch(err){\n       console.error(err);\n     }\n"
                }
            ],
            "date": 1643623298801,
            "name": "Commit-0",
            "content": "import {Controller} from '../../../types/controller.types';\nimport {Router,Request,Response} from 'express';\nimport ModelMedication from '../models/medication.model';\nimport fs from 'fs';\nimport axios from 'axios';\nclass Medication implements Controller{\n  public path ='/medication';\n  public router = Router();\n  constructor(){\n    this.initializeRouter();\n  }\n  private initializeRouter(){\n      this.router.post(`${this.path}/current`, this.getCurrentMedication);\n      this.router.post(`${this.path}/search`, this.searchMedications);\n      this.router.post(`${this.path}/top`, this.topMedication);\n      this.router.get(`${this.path}/filldb`, this.fillDbMed);\n      this.router.get(`${this.path}/group`,this.searchGroup);\n      this.router.get(`${this.path}/medsave`, this.medSave);\n  }\n  private async medSave(req:any, res:Response){\n    const token:any = await axios({\n      method:\"POST\",\n      url:\"https://perks.optum.com/api/oauth/token\",\n    });\n    const account:any = await axios({\n      method:\"POST\",\n      url:\"https://api.perks.optum.com/api/optumperks/v1/account\",\n      headers:{\n        authorization:`Bearer ${token.data.access_token}`,\n        'x-correlation-id':`${req.correlationId()}`,\n        'x-app-id':\"Optum Perks\"\n      }\n    });\n    \n    const result = await axios({\n      method:\"GET\",\n      url:`https://api.perks.optum.com/api/optumperks/v1/drugs/${req.body.name.replaceAll(\" \", \"-\").toLowerCase()}`,\n      headers:{\n        authorization:`Bearer ${token.data.access_token}`,\n        'x-app-id':\"Optum Perks\",\n        \"x-correlation-id\":`${req.correlationId()}`,\n        'x-account-id':`${account.data.id}`\n      }\n    });\n    const data = await ModelMedication.saveMedication(result.data);\n    if(!data){\n      return res.status(400).json({message:\"Error\"});\n    }\n    return res.status(200).json(data);\n  }\n  private async searchGroup(req:Request,res:Response){\n    try{\n      const group:any = await ModelMedication.searchGroup(req.body.name);\n      const unique = async (array:any, propertyName:any) => {\n        return await array.filter((e:any,i:any) => array.findIndex((a:any) => a[propertyName] === e[propertyName]) === i);\n      }\n      const data = await unique(group, \"label\");\n      return res.status(200).json(data);\n    }catch(err){\n      console.error(err);\n    }\n  }\n  private async topMedication(req:Request,res:Response){\n\n    try{\n        // const medication:any = await ModelMedication.searchMed();\n        // const unique = async (array:any,propertyName:any) => {\n        //   return await array.filter((e:any,i:any) => array.findIndex((a:any) => a.label[propertyName] === e.label[propertyName]) === i);\n        // }\n        // const data = await unique(medication, \"label\");\n        const medication:any = await ModelMedication.searchUniqueMed();\n        return res.status(200).json(medication);\n    }catch(err){\n      console.error(err);\n    }\n    \n  }\n  private async fillDbMed(req:any,res:Response){\n    const medication = fs.readFileSync('med.json','utf-8');\n    const top = await JSON.parse(medication);\n    const token:any = await axios({\n      method: \"POST\",\n    url: \"https://perks.optum.com/api/oauth/token\",\n    })\n    const account:any = await axios({\n      method:\"POST\",\n      url: \"https://api.perks.optum.com/api/optumperks/v1/account\",\n      headers:{\n        authorization:`Bearer ${token.data.access_token}`,\n        'x-correlation-id':`${req.correlationId()}`,\n        'x-app-id':\"Optum Perks\"\n      }\n    });\n    const urls = top.map((item:any) => {\n      return `https://api.perks.optum.com/api/optumperks/v1/drugs/${item.label.replaceAll(\" \",\"-\").toLowerCase()}`\n    })\n    const requests = await urls.map(async (item:any) => {\n      const result =  await axios({\n        method:\"GET\",\n        url:item,\n        headers:{\n          authorization: `Bearer ${token.data.access_token}`,\n          \"x-app-id\":\"Optum Perks\",\n          \"x-correlation-id\":`${req.correlationId()}`,\n          \"x-account-id\":`${account.data.id}`\n        }\n      });\n      return result.data;\n    });\n    const data = await axios.all(requests);\n    console.log(data);\n    await ModelMedication.insertMany(data);\n    return res.status(200);\n  }\n\n\n\n\n  private async getCurrentMedication(req:any,res:Response){\n    const med:any = await ModelMedication.getCurrentPharm(req.body.name);\n   if(med.length > 0){\n      await med[0].variants.push({\n      id: med[0].id,\n      name: med[0].name,\n      drugType: med[0].drugType,\n      urlSlug: med[0].name\n   })\n\n    const manufacturer = med[0].settings.manufacturer.filter((value:any, index:any, self:any) => {\n      return self.indexOf(value) === index;\n    });\n    const form = med[0].settings.form.filter((value:any, index:any, self:any) => {\n      return self.indexOf(value) === index;\n    });\n    const data:any = med[0];\n    const formattedData = Object.assign(data, {\n      settings:{\n        manufacturer: manufacturer,\n        form: form\n      }\n    })\n    return res.status(200).json(formattedData);\n   }\n  //  else{\n  //   const result = await axios({\n  //     url: `https://api.perks.optum.com/api/optumperks/v1/drugs/${req.body.name.replaceAll(\" \", \"-\").toLowerCase()}`,\n  //     method:'GET',\n  //     headers:{\n  //       authorization: req.body.headers.authorization,\n  //       'x-account-id':req.body.headers['x-account-id'] ,\n  //       'x-app-id':\"Optum Perks\",\n  //       'x-correlation-id':req.correlationId(),\n  //     },\n  //   })\n  //   await ModelMedication.saveMedication(result.data);\n  //   const data:any = await ModelMedication.getCurrentPharm(req.body.name);\n  //   await data[0].variants.push({\n  //     id: data[0].id,\n  //     name: data[0].name,\n  //     drugType: data[0].drugType,\n  //     urlSlug: data[0].name\n  //   })\n  //   return res.status(200).send(data);\n  //  }\n  }\n  \n\n\n  private async searchMedications(req:any, res:Response) {\n    \n    const result:any = await axios({\n      url: `https://api.perks.optum.com/api/optumperks/v1/search?q=${req.body.name}&type=drug&limit=10`,\n      method:\"GET\",\n      headers:{\n        authorization: req.body.headers.Authorization,\n        'x-account-id':req.body.headers['x-account-id'] ,\n        'x-app-id':\"Optum Perks\",\n        'x-correlation-id':req.correlationId(),\n        origin: 'https://perks.optum.com',\n        referer: 'https://perks.optum.com/',\n      }\n    });\n    return res.status(200).json(result.data);\n  }\n}\n\n\n\nexport default Medication;"
        }
    ]
}