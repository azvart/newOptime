{
    "sourceFile": "src/server/controllers/price.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1644384156412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1644386770077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import {Request, Response, Router} from 'express';\n import Price from '../models/price.model';\n import axios, {AxiosResponse} from 'axios';\n import {Settings} from '../utils/priceSettings';\n+import PriceService from '../services/price.service';\n class Prices implements Controller{\n   public path = '/price';\n   public router = Router();\n \n"
                },
                {
                    "date": 1644386791225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import PriceService from '../services/price.service';\n class Prices implements Controller{\n   public path = '/price';\n   public router = Router();\n-\n+  public service = new PriceService();\n   constructor(){\n     this.initializeRoutes();\n   }\n \n"
                },
                {
                    "date": 1644386866766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import Price from '../models/price.model';\n import axios, {AxiosResponse} from 'axios';\n import {Settings} from '../utils/priceSettings';\n import PriceService from '../services/price.service';\n+import type { IRequestPriceParamsService } from '../../../types/price.types';\n class Prices implements Controller{\n   public path = '/price';\n   public router = Router();\n   public service = new PriceService();\n@@ -15,53 +16,57 @@\n   private initializeRoutes(){\n       this.router.post(`${this.path}/getting`, this.getPrice);\n   }\n \n-  private async getPrice(req:any, res:Response){\n-    const token = `Bearer ${req.cookies.token}`\n-    const account = req.cookies.account;\n-    const { name } = req.body;\n-    const replacingName = name.replaceAll(\" \", \"+\");\n-    const prices:any = await Price.findPrice(req.body.formulationId, req.body.quantity, req.body.searchLocation);\n-    const priceFormated = await Settings(prices, req.body.searchLocation);\n+  private getPrice = async (req:Request<any>, res:Response) => {\n \n-    if(!prices.length){  \n-      const optumPrice:AxiosResponse<any> = await axios({\n-        method:\"GET\",\n-        url:`https://api.perks.optum.com/api/optumperks/v1/prices`,\n-        headers:{\n-          \"Content-Type\":\"application/json\",\n-          'Accept':\"application/json\",\n-          authorization: token,\n-          'x-account-id':account,\n-          \"x-correlation-id\": req.correlationId(),\n-          'x-app-id': \"Optum Perks\",\n-          \n-        },\n-        params:{\n-          quantity:req.body.quantity,\n-          formulationId:req.body.formulationId,\n-          'b-g':req.body.type,\n-          dn:replacingName,\n-          gpi14:req.body.gpi14,\n-          ubi:req.body.ubi,\n-          searchLocation:req.body.searchLocation,\n-          searchLocationZipCode:req.body.searchLocationZipCode\n-        }\n-      });\n-      await new Price({\n-        formId:req.body.formulationId,\n-        quantity: req.body.quantity,\n-        location:req.body.searchLocation,\n-        data: optumPrice.data.data\n-      }).save();\n-      const priceFind = await Price.findPrice(req.body.formulationId, req.body.quantity, req.body.searchLocation);\n-      const formatted = await Settings(priceFind, req.body.searchLocation);\n-      return res.status(200).json(formatted);\n-    }\n-    return res.status(200).json(priceFormated);\n   }\n \n+  // private async getPrice(req:any, res:Response){\n+  //   const token = `Bearer ${req.cookies.token}`\n+  //   const account = req.cookies.account;\n+  //   const { name } = req.body;\n+  //   const replacingName = name.replaceAll(\" \", \"+\");\n+  //   const prices:any = await Price.findPrice(req.body.formulationId, req.body.quantity, req.body.searchLocation);\n+  //   const priceFormated = await Settings(prices, req.body.searchLocation);\n+\n+  //   if(!prices.length){  \n+  //     const optumPrice:AxiosResponse<any> = await axios({\n+  //       method:\"GET\",\n+  //       url:`https://api.perks.optum.com/api/optumperks/v1/prices`,\n+  //       headers:{\n+  //         \"Content-Type\":\"application/json\",\n+  //         'Accept':\"application/json\",\n+  //         authorization: token,\n+  //         'x-account-id':account,\n+  //         \"x-correlation-id\": req.correlationId(),\n+  //         'x-app-id': \"Optum Perks\",\n+          \n+  //       },\n+  //       params:{\n+  //         quantity:req.body.quantity,\n+  //         formulationId:req.body.formulationId,\n+  //         'b-g':req.body.type,\n+  //         dn:replacingName,\n+  //         gpi14:req.body.gpi14,\n+  //         ubi:req.body.ubi,\n+  //         searchLocation:req.body.searchLocation,\n+  //         searchLocationZipCode:req.body.searchLocationZipCode\n+  //       }\n+  //     });\n+  //     await new Price({\n+  //       formId:req.body.formulationId,\n+  //       quantity: req.body.quantity,\n+  //       location:req.body.searchLocation,\n+  //       data: optumPrice.data.data\n+  //     }).save();\n+  //     const priceFind = await Price.findPrice(req.body.formulationId, req.body.quantity, req.body.searchLocation);\n+  //     const formatted = await Settings(priceFind, req.body.searchLocation);\n+  //     return res.status(200).json(formatted);\n+  //   }\n+  //   return res.status(200).json(priceFormated);\n+  // }\n+\n }\n \n \n \n"
                },
                {
                    "date": 1644387123279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,24 @@\n       this.router.post(`${this.path}/getting`, this.getPrice);\n   }\n \n   private getPrice = async (req:Request<any>, res:Response) => {\n+    const token = `Bearer ${req.cookies.token}`;\n+    const account = req.cookies.account;\n+    const { name } = req.body;\n+    const replacingName:string = name.replaceAll(\" \", \"+\");\n+    const params:IRequestPriceParamsService = {\n+      quantity: req.body.quantity,\n+      formulationId:req.body.formulationId,\n+      'b-g': req.body.type,\n+      dn: replacingName,\n+      gpi14: req.body.gpi14,\n+      ubi: req.body.ubi,\n+      searchLocation: req.body.searchLocation,\n+      searchLocationZipCode: req.body.searchLocationZipCode,\n+    }\n \n+\n   }\n \n   // private async getPrice(req:any, res:Response){\n   //   const token = `Bearer ${req.cookies.token}`\n"
                },
                {
                    "date": 1644387415315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,16 @@\n       ubi: req.body.ubi,\n       searchLocation: req.body.searchLocation,\n       searchLocationZipCode: req.body.searchLocationZipCode,\n     }\n+    try{\n+      const data = await this.service.getPrice(params);\n+      const formatted = await this.service.settingsPrice(data, params.searchLocation);\n+      return res.status(200).json(formatted);\n+    }catch(e){\n+      return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n+    }\n \n-\n   }\n \n   // private async getPrice(req:any, res:Response){\n   //   const token = `Bearer ${req.cookies.token}`\n"
                },
                {
                    "date": 1644387426634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n       return res.status(200).json(formatted);\n     }catch(e){\n       return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n-\n+    \n   }\n \n   // private async getPrice(req:any, res:Response){\n   //   const token = `Bearer ${req.cookies.token}`\n"
                },
                {
                    "date": 1644387719198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,17 @@\n       ubi: req.body.ubi,\n       searchLocation: req.body.searchLocation,\n       searchLocationZipCode: req.body.searchLocationZipCode,\n     }\n+    console.log(params);\n     try{\n       const data = await this.service.getPrice(params);\n       const formatted = await this.service.settingsPrice(data, params.searchLocation);\n       return res.status(200).json(formatted);\n     }catch(e){\n       return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n-    \n+\n   }\n \n   // private async getPrice(req:any, res:Response){\n   //   const token = `Bearer ${req.cookies.token}`\n"
                },
                {
                    "date": 1644387762909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n       ubi: req.body.ubi,\n       searchLocation: req.body.searchLocation,\n       searchLocationZipCode: req.body.searchLocationZipCode,\n     }\n-    console.log(params);\n     try{\n       const data = await this.service.getPrice(params);\n       const formatted = await this.service.settingsPrice(data, params.searchLocation);\n       return res.status(200).json(formatted);\n"
                },
                {
                    "date": 1644388083140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   private initializeRoutes(){\n       this.router.post(`${this.path}/getting`, this.getPrice);\n   }\n \n-  private getPrice = async (req:Request<any>, res:Response) => {\n+  private getPrice = async (req:any, res:Response) => {\n     const token = `Bearer ${req.cookies.token}`;\n     const account = req.cookies.account;\n     const { name } = req.body;\n     const replacingName:string = name.replaceAll(\" \", \"+\");\n@@ -34,8 +34,9 @@\n     }\n     try{\n       const data = await this.service.getPrice(params);\n       const formatted = await this.service.settingsPrice(data, params.searchLocation);\n+      const requested = await this.service.getRequestPrice(params, token, account, req.correlationId())\n       return res.status(200).json(formatted);\n     }catch(e){\n       return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n"
                },
                {
                    "date": 1644388093948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n     try{\n       const data = await this.service.getPrice(params);\n       const formatted = await this.service.settingsPrice(data, params.searchLocation);\n       const requested = await this.service.getRequestPrice(params, token, account, req.correlationId())\n+      console.log(requested);\n       return res.status(200).json(formatted);\n     }catch(e){\n       return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n"
                },
                {
                    "date": 1644389490113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,12 @@\n     try{\n       const data = await this.service.getPrice(params);\n       const formatted = await this.service.settingsPrice(data, params.searchLocation);\n       const requested = await this.service.getRequestPrice(params, token, account, req.correlationId())\n-      console.log(requested);\n+      if(formatted.length === 0){\n+        const requestFormatted = await this.service.settingsPrice(requested, params.searchLocation);\n+        return res.status(200).json(requestFormatted);\n+      }\n       return res.status(200).json(formatted);\n     }catch(e){\n       return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n"
                },
                {
                    "date": 1644390628478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         return res.status(200).json(requestFormatted);\n       }\n       return res.status(200).json(formatted);\n     }catch(e){\n-      return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n+      return res.status(200).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n \n   }\n \n"
                },
                {
                    "date": 1644390673874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         return res.status(200).json(requestFormatted);\n       }\n       return res.status(200).json(formatted);\n     }catch(e){\n-      return res.status(200).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n+      return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n \n   }\n \n"
                },
                {
                    "date": 1644390746877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         return res.status(200).json(requestFormatted);\n       }\n       return res.status(200).json(formatted);\n     }catch(e){\n-      return res.status(400).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n+      return res.status(404).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n \n   }\n \n"
                },
                {
                    "date": 1644412627452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         return res.status(200).json(requestFormatted);\n       }\n       return res.status(200).json(formatted);\n     }catch(e){\n-      return res.status(404).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n+      return res.status(500).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n \n   }\n \n"
                },
                {
                    "date": 1644412845579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     const replacingName:string = name.replaceAll(\" \", \"+\");\n     const params:IRequestPriceParamsService = {\n       quantity: req.body.quantity,\n       formulationId:req.body.formulationId,\n-      'b-g': req.body.type,\n+      // 'b-g': req.body.type,\n       dn: replacingName,\n       gpi14: req.body.gpi14,\n       ubi: req.body.ubi,\n       searchLocation: req.body.searchLocation,\n"
                },
                {
                    "date": 1644412896742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     const replacingName:string = name.replaceAll(\" \", \"+\");\n     const params:IRequestPriceParamsService = {\n       quantity: req.body.quantity,\n       formulationId:req.body.formulationId,\n-      // 'b-g': req.body.type,\n+      'b-g': req.body.type,\n       dn: replacingName,\n       gpi14: req.body.gpi14,\n       ubi: req.body.ubi,\n       searchLocation: req.body.searchLocation,\n"
                },
                {
                    "date": 1644412978583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         return res.status(200).json(requestFormatted);\n       }\n       return res.status(200).json(formatted);\n     }catch(e){\n-      return res.status(500).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n+      return res.json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n \n   }\n \n"
                },
                {
                    "date": 1644413017413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         return res.status(200).json(requestFormatted);\n       }\n       return res.status(200).json(formatted);\n     }catch(e){\n-      return res.json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n+      return res.status(404).json({message:`${e.message}`, status: false, userMessage:\"Sorry price not found\"});\n     }\n \n   }\n \n"
                }
            ],
            "date": 1644384156412,
            "name": "Commit-0",
            "content": "import { Controller } from \"../../../types/controller.types\";\nimport {Request, Response, Router} from 'express';\nimport Price from '../models/price.model';\nimport axios, {AxiosResponse} from 'axios';\nimport {Settings} from '../utils/priceSettings';\nclass Prices implements Controller{\n  public path = '/price';\n  public router = Router();\n\n  constructor(){\n    this.initializeRoutes();\n  }\n\n  private initializeRoutes(){\n      this.router.post(`${this.path}/getting`, this.getPrice);\n  }\n\n  private async getPrice(req:any, res:Response){\n    const token = `Bearer ${req.cookies.token}`\n    const account = req.cookies.account;\n    const { name } = req.body;\n    const replacingName = name.replaceAll(\" \", \"+\");\n    const prices:any = await Price.findPrice(req.body.formulationId, req.body.quantity, req.body.searchLocation);\n    const priceFormated = await Settings(prices, req.body.searchLocation);\n\n    if(!prices.length){  \n      const optumPrice:AxiosResponse<any> = await axios({\n        method:\"GET\",\n        url:`https://api.perks.optum.com/api/optumperks/v1/prices`,\n        headers:{\n          \"Content-Type\":\"application/json\",\n          'Accept':\"application/json\",\n          authorization: token,\n          'x-account-id':account,\n          \"x-correlation-id\": req.correlationId(),\n          'x-app-id': \"Optum Perks\",\n          \n        },\n        params:{\n          quantity:req.body.quantity,\n          formulationId:req.body.formulationId,\n          'b-g':req.body.type,\n          dn:replacingName,\n          gpi14:req.body.gpi14,\n          ubi:req.body.ubi,\n          searchLocation:req.body.searchLocation,\n          searchLocationZipCode:req.body.searchLocationZipCode\n        }\n      });\n      await new Price({\n        formId:req.body.formulationId,\n        quantity: req.body.quantity,\n        location:req.body.searchLocation,\n        data: optumPrice.data.data\n      }).save();\n      const priceFind = await Price.findPrice(req.body.formulationId, req.body.quantity, req.body.searchLocation);\n      const formatted = await Settings(priceFind, req.body.searchLocation);\n      return res.status(200).json(formatted);\n    }\n    return res.status(200).json(priceFormated);\n  }\n\n}\n\n\n\nexport default  Prices;"
        }
    ]
}