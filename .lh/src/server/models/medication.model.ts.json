{
    "sourceFile": "src/server/models/medication.model.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1643623152730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643623167677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,10 @@\n           }\n         }]\n       }]\n     }\n-  ])\n+  ]);\n+  return data[0].data;\n }\n const ModelMedication = mongoose.model<MedicationDocument, MedicationModel>(\"medication\",MedicationSchema);\n \n export default ModelMedication;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643623176662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,9 @@\n         }]\n       }]\n     }\n   ]);\n-  return data[0].data;\n+  return data[0];\n }\n const ModelMedication = mongoose.model<MedicationDocument, MedicationModel>(\"medication\",MedicationSchema);\n \n export default ModelMedication;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643623266898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n   getCurrentPharm: (name:string) => Promise<Document>;\n   saveMedication: (data:any) => Promise<Document>;\n   searchMed: () => Promise<Document>;\n   searchGroup: (name:string) => Promise<Document>;\n+  searchUniqueMed: () => Promise<Document>;\n };\n \n const MedicationSchema:Schema = new Schema({\n     id:{\n"
                },
                {
                    "date": 1643623486470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n         }]\n       }]\n     }\n   ]);\n-  return data[0];\n+  return data;\n }\n const ModelMedication = mongoose.model<MedicationDocument, MedicationModel>(\"medication\",MedicationSchema);\n \n export default ModelMedication;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643623837174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,10 @@\n         \"label\":\"$formulations\",\n         \"group\":\"$name\"\n       }\n     },\n-    {\n+    { \n+      $project:{\n       title:\"$group\",\n       label:[{\n         $setUnion:[{\n           $map:{\n@@ -264,8 +265,9 @@\n           }\n         }]\n       }]\n     }\n+    }\n   ]);\n   return data;\n }\n const ModelMedication = mongoose.model<MedicationDocument, MedicationModel>(\"medication\",MedicationSchema);\n"
                },
                {
                    "date": 1643633060197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,9 @@\n     },\n     { \n       $project:{\n       title:\"$group\",\n-      label:[{\n+      label:{\n         $setUnion:[{\n           $map:{\n             input:\"$label\",\n             as:\"item\",\n@@ -263,9 +263,9 @@\n               type:'$$item.drugType'\n             }\n           }\n         }]\n-      }]\n+      }\n     }\n     }\n   ]);\n   return data;\n"
                }
            ],
            "date": 1643623152730,
            "name": "Commit-0",
            "content": "import mongoose, {Document, Schema, Model} from 'mongoose';\n\ninterface MedicationDocument extends Document{};\ninterface MedicationModel extends Model<MedicationDocument>{\n  getCurrentPharm: (name:string) => Promise<Document>;\n  saveMedication: (data:any) => Promise<Document>;\n  searchMed: () => Promise<Document>;\n  searchGroup: (name:string) => Promise<Document>;\n};\n\nconst MedicationSchema:Schema = new Schema({\n    id:{\n      type: String,\n    },\n    name:{\n      type: String\n    },\n    descriptionHtml:{\n      type: String,\n    },\n    descriptionText:{\n      type: String\n    },\n    drugType:{\n      type:String,\n    },\n    drugStatus:{\n      type: Object,\n    },\n    drugMessages:{\n      type: Array,\n    },\n    isOtcDrug:{\n      type: Boolean,\n    },\n    variants:{\n      type: Array,\n    },\n    formulations:{\n      type:Array,\n    },\n    defaultSettings:{\n      type:Object,\n    },\n    info:{\n      type: Array,\n    },\n    theraoeuticClas_:{\n      type:Array,\n    },\n    pharmacologicCl_:{\n      type:Array,\n    },\n    urlSlug:{\n      type:String,\n    },\n    medicare:{\n      type: Object,\n    },\n    legalDisclamer:{\n      type: String,\n    },\n    sideEffects:{\n      type:Object,\n    }\n},{versionKey:false});\n\nMedicationSchema.statics.getCurrentPharm = async function(name:string){\n   const med: any = await this.aggregate([\n    {\n      $match:{\n        $or:[\n          {\"name\":{$regex:`.*${name}.*`,$options:\"i\",$in:[`${name}`]}},\n          {\"variants.name\":{$regex:`.*${name}.*`,$options:\"i\",$in:[`${name}`]}},\n          // {\"name\":`${name}`}\n        ]\n      }\n    },\n     {\n       $project:{\n         \"name\":1,\n         \"variants\":1,\n         \"formulations\":1,\n         \"drugType\":1,\n         \"id\":1,\n         \"defaultSettings\":1,\n         \"descriptionHtml\":1,\n         \"descriptionText\":1,\n         brandSettings:{\n          $reduce:{\n            input:\"$formulations\",\n            initialValue:{},\n            in:{\n              $cond:{\n                if:{$eq:[\"$$this.id\",\"$defaultSettings.formulationId\"]},\n                then:\"$$this\",\n                else:\"$$value\",\n              }\n            }\n          }\n        },\n        genericSettings:{\n          $reduce:{\n            input:\"$formulations\",\n            initialValue:[],\n            in:{\n              $cond:{\n                if:{$eq:[\"$$this.name\",name]},\n                then:{$concatArrays:[\"$$value\",[\"$$this\"]]},\n                else:\"$$value\"\n              }\n            }\n          }\n        }\n       },\n     },\n     {\n      $project:{\n        name:1,\n        variants:1,\n        formulations:1,\n        drugType:1,\n        id:1,\n        defaultSettings:1,\n        descriptionHtml:1,\n        descriptionText:1,\n        brandSettings: 1,\n        genericSettings: 1,\n        comparing:{\n          $filter:{\n            input:\"$genericSettings\",\n            as:\"item\",\n            cond:{\n              $or:[\n              {$and:[\n                {$eq:[\"$$item.form\", \"$brandSettings.form\"]},\n                {$eq:[\"$$item.dosage.value\",\"$brandSettings.dosage.value\"]}\n              ]},\n              {$eq:[\"$$item.dosage.value\",\"$brandSettings.dosage.value\"]}\n            ]\n            }\n          }\n        },\n        settings:{\n          $reduce:{\n            input:\"$formulations\",\n            initialValue:{\n              manufacturer:[],\n              form:[],\n            },\n            in:{\n              manufacturer:{\n                $concatArrays:[\"$$value.manufacturer\",[{$concat:[\"$$this.name\", \" \", \"(\",\"$$this.drugType\",\")\"]}]]\n              },\n              form:{\n                $concatArrays:[\"$$value.form\",[\"$$this.form\"]]\n              }\n            },\n          },\n           }\n      }\n     }\n   ]);\n   return med;\n}\n\nMedicationSchema.statics.saveMedication = async function(data:any){\n  return new this(data).save();\n}\nMedicationSchema.statics.searchGroup = async function(name:string){\n  const group = await this.aggregate([\n    {\n      $match:{\n        \"formulations.name\":{\n          $regex:`.*${name}.*`,$options:\"i\"\n        }\n      }\n    },\n    {\n      $project:{\n        \"label\":\"$formulations.name\",\n        \n      }\n    },\n    {\n      $facet:{\n        \"data\":[{$unwind:\"$label\"}]\n      }\n    }\n  ]);\n  return group[0].data;\n}\nMedicationSchema.statics.searchMed = async function(){\n  const data:any = await this.aggregate([\n    {\n      $match:{\n        $or:[\n          {\"formulations.name\":{$regex:\".*.*\",$options:\"i\"}},\n          {\"variants.name\":{$regex:\".*.*\",$options:\"i\"}}\n        ]\n      }\n    },\n    {\n      $project:{\n        \"label\":\"$formulations\",\n        \"group\":\"$name\"\n      }\n    },\n    {\n      $project:{\n      group:\"$group\",\n      label:{\n        $map:{\n          input:\"$label\",\n          as:\"item\",\n          in:{\n            label:\"$$item.name\",\n            type:\"$$item.drugType\"\n          }\n        }\n      }\n    }\n    },\n    {\n      $facet:{\n        \"data\":[{$unwind:\"$label\"}]\n      }\n    }\n  ]);\n\n\n  return data[0].data;\n}\n\n\nMedicationSchema.statics.searchUniqueMed = async function(){\n  const data:any = await this.aggregate([\n    {\n      $match:{\n        $or:[\n          {'formulations.name':{$regex:\".*.*\",$options:\"i\"}},\n          {\"variants.name\":{$regex:\".*.*\", $options:\"i\"}}\n        ]\n      }\n    },\n    {\n      $project:{\n        \"label\":\"$formulations\",\n        \"group\":\"$name\"\n      }\n    },\n    {\n      title:\"$group\",\n      label:[{\n        $setUnion:[{\n          $map:{\n            input:\"$label\",\n            as:\"item\",\n            in:{\n              label:'$$item.name',\n              type:'$$item.drugType'\n            }\n          }\n        }]\n      }]\n    }\n  ])\n}\nconst ModelMedication = mongoose.model<MedicationDocument, MedicationModel>(\"medication\",MedicationSchema);\n\nexport default ModelMedication;"
        }
    ]
}